#+AUTHOR: Ignasi Fosch
#+TITLE: PyBCN Dojo: Gilded Rose Refactoring Kata
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/
#+REVEAL_HLEVEL: 2
#+REVEAL_EXTRA_CSS: dojos.css
#+OPTIONS: toc:2
#+OPTIONS: reveal_progress:t
#+OPTIONS: reveal_title_slide:"<h1>%t</h1><h2>%a</h2>"
#+OPTIONS: reveal_width:1200
#+OPTIONS: reveal_height:800
#+OPTIONS: num:nil
#+REVEAL_THEME: beige

* Dojo session
*** Coding dojo goals
- Enjoy coding with friends
- Learn about techniques and tools from others
- Share knowledge with others
- Practice new techniques and tools in a safe environment
*** Coding dojo principles
- No competition, no target, no prizes
- Practice and experiment
- Master a subject
- Understand and offer own knowledge
- Show own code and examples
- Forget to learn again
- Baby steps, not in a rush
- Listen others
*** Coding dojo cycle
#+BEGIN_SRC ditaa :file dojo_cycle.png
                    /------------------\
                    |     OVERVIEW     |
                    | Problem analysis |
          +---------|   Test cases     |
          |         |   Guiding Test   |
          |         \------------------/
          |
          v
 /------------------\               /--------------------\
 | cRED  RED        |               | cGRE   GREEN       |
 |  Declare & Name  |-------------->| Implement Solution |
 |      AAA         |               |  No Optimization   |
 | Satisfy Language |               |    Start Over      |
 \------------------/               \--------------------/
          ^                                    |
          |         /---------------------\    |
          |         | cYEL  REFACTOR      |    |
          +---------| Remove useless code |<---+
                    |      Optimize       |
                    |   Check all green   |
                    | Note new test cases |
                    \---------------------/
#+END_SRC
* Gilded Rose Refactoring Kata
** The Gilded Rose Inn
Hi and welcome to team Gilded Rose.

As you know, we are a small inn with a prime location in a prominent city ran by a friendly innkeeper named Allison.
We also buy and sell only the finest goods.
Unfortunately, our goods are constantly degrading in quality as they approach their sell by date.
We have a system in place that updates our inventory for us.
It was developed by a no-nonsense type named Leeroy, who has moved on to new adventures.

#+REVEAL: split

First an introduction to our system:
- All items have a ~sell_in~ value which denotes the number of days we have to sell the item
- All items have a quality value which denotes how valuable the item is
- At the end of each day our system lowers both values for every item

#+REVEAL: split

Pretty simple, right?
Well, this is where it gets interesting:
- Once the sell by date has passed, quality degrades twice as fast
- The quality of an item is never negative
- “Aged Brie” actually increases in quality the older it gets
- The quality of an item is never more than 50
- “Sulfuras...”, being a legendary item, never has to be sold or decreases in quality
- “Backstage passes...”, like aged brie, increases in quality as it’s ~sell_in~ value approaches; quality increases by 2 when there are 10 days or less and by 3 when there are 5 days or less but quality drops to 0 after the concert

#+REVEAL: split

Feel free to make any changes to the ~update_quality~ method and add any new code as long as everything still works correctly.
However, do not alter the Item class or items property as those belong to the goblin in the corner who will insta-rage and one-shot you as he doesn’t believe in shared code ownership (you can make the ~update_quality~ method and items property static if you like, we’ll cover for you).

** Get your gear!

For this quest, you have been provided with some items that will help you...

You've been provided with a fixture generator, which generates example runs with many cases.

#+REVEAL: split

You can use it like this, argument is the number of days to count for update:

    : $ python generate_fixture.py 1
    : -------- day 0 --------
    : name, sellIn, quality
    : +5 Dexterity Vest, 10, 20
    : Aged Brie, 2, 0
    : Elixir of the Mongoose, 5, 7
    : Sulfuras, Hand of Ragnaros, 0, 80
    : Sulfuras, Hand of Ragnaros, -1, 80
    : Backstage passes to a TAFKAL80ETC concert, 15, 20
    : Backstage passes to a TAFKAL80ETC concert, 10, 49
    : Backstage passes to a TAFKAL80ETC concert, 5, 49
    : Conjured Mana Cake, 3, 6

#+REVEAL: split

    : -------- day 1 --------
    : name, sellIn, quality
    : +5 Dexterity Vest, 9, 19
    : Aged Brie, 1, 1
    : Elixir of the Mongoose, 4, 6
    : Sulfuras, Hand of Ragnaros, 0, 80
    : Sulfuras, Hand of Ragnaros, -1, 80
    : Backstage passes to a TAFKAL80ETC concert, 14, 21
    : Backstage passes to a TAFKAL80ETC concert, 9, 50
    : Backstage passes to a TAFKAL80ETC concert, 4, 50
    : Conjured Mana Cake, 2, 5

#+REVEAL: split

You are strongly recommended to run this command with an appropriate number of days as argument, redirecting the output to a ~golden_master.txt~ file.
That way, while refactoring, you'll be able to check the output of the following command to ensure everything is ok:

    : $ bash run_tests
    : ============================= test session starts ==============================
    : platform linux -- Python 3.5.4, pytest-3.2.3, py-1.4.34, pluggy-0.4.0
    : rootdir: /home/ifosch/src/github.com/BCNDojos/pyDojos/gilded-rose, inifile:
    : collected 1 item
    : 
    : test_gilded_rose.py .
    : 
    : ======================== 1 passed in 0.00 seconds ==============================

*** Get some scrolls

If you take a look to ~run_tests~ it will show how many days it is using to generate the fixture:

#+INCLUDE: "run_tests" src bash :only-contents t

So, this bash script runs ~pytest~ on current directory.
If it works ok, then, it runs the fixture generator for 27 days, storing output to ~test_output.txt~.
If this doesn't fail, then it compares output from current code with the fixture file.
This fixture file is what needs to be generated in this step.

#+REVEAL: split

Let's run it like this:

#+BEGIN_SRC bash -l :results output :exports code
python generate_fixture.py 27 > golden_master.txt
#+END_SRC

#+BEGIN_SRC bash -l :results output :exports results
. ~/.bashrc &>/dev/null && . ~/.bash_profile &>/dev/null && activate gilded-rose &>/dev/null
python generate_fixture.py 27 > golden_master.txt
#+END_SRC

*** Learn some magic

Let's look at the file now, and check how the business rules are applied by the current implementation:

#+INCLUDE: "golden_master.txt" src bash :lines "-25"

#+REVEAL: split

From these first 24 lines, we can infer the following:
- /Normal/ items, like ~+5 Dexterity Vest~, ~Elixir of the Mongoose~, or ~Conjured Mana Cake~, are treated as described, so far; meaning these items' ~sell_in~ and ~quality~ attributes are decreased in 1
- ~Aged Brie~, as specified, increases quality as getting older
- ~Sulfuras...~ are kept untouched, even when the ~quality > 50~, or when the ~sell_in~ date was reached
- ~Backstage passes...~ are also treated as specified, so far

#+REVEAL: split

#+INCLUDE: "golden_master.txt" src bash :lines "25-49"

#+REVEAL: split

These other lines show us some more details:
- As described, ~Aged Brie~ increases ~quality~ twice, once the ~sell_in~ date has been reached
- Two of the ~Backstage passes...~ items have reached maximum ~quality~, so these can't got it better
- The behaviour of the rest of the items is as expected

#+REVEAL: split

#+INCLUDE: "golden_master.txt" src bash :lines "61-85"

#+REVEAL: split

In this part of the file, we can see the following:
- /Normal/ items that passed ~sell_in~ date, like ~Elixir of the Mongoose~ or ~Conjured Mana Cake~ here, get 0 ~quality~
- ~Backstage passes...~ having ~sell_in < 10~ increase their ~quality~ twice
- ~Backstage passes...~ having passed their ~sell_in~, get 0 ~quality~

#+REVEAL: split

#+INCLUDE: "golden_master.txt" src bash :lines "121-145"

#+REVEAL: split

Here, the only thing left to confirm is that ~Backstage passes...~ having less than 5 days to ~sell_in~, increase quality by 3.

#+REVEAL: split

#+INCLUDE: "golden_master.txt" src bash :lines "312-"

#+REVEAL: split

Finally, the last two days updates can't increase ~Aged Brie~'s ~quality~ over 50.

** Equip your gear

Before going on, you should also fill up the ~test_gilded_rose.py~ with tests for the all use cases...
Be careful, there'll be dragons!

*** Equipping one /Normal/ item
    
Let's start by discarding current tests in ~test_gilded_rose.py~, and start a new test from scratch for normal items updates.

Remember the /AAA/ principle.

As a recomendation, avoid to implement too complex test functions, at least, at the beginning. Readability and simplicity are more valuable than completeness and broad scopes.

#+REVEAL: split

Let's take this as example:

#+BEGIN_SRC python :exports code
def test_normal_items():
    # Arrange
    test_case = (
        Item("+5 Dexterity Vest", 2, 4),
        Item("+5 Dexterity Vest", 1, 3),
    )
    items = [test_case[0]]
    gilded_rose = GildedRose(items)
    # Act
    gilded_rose.update_quality()
    # Assert
    for item in items:
        assert item.sell_in == test_case[1].sell_in
        assert item.quality == test_case[1].quality
#+END_SRC

#+REVEAL: split

Now, let's check this is working fine:

#+BEGIN_SRC bash :exports code
pytest .
#+END_SRC

#+BEGIN_EXAMPLE
============================= test session starts ==============================
platform linux -- Python 3.5.4, pytest-3.2.3, py-1.4.34, pluggy-0.4.0
rootdir: /home/ifosch/src/github.com/BCNDojos/pyDojos/gilded-rose, inifile:
collected 1 item

test_gilded_rose.py .

=========================== 1 passed in 0.01 seconds ===========================
#+END_EXAMPLE

*** Equipping one more /Normal/ item

The test just created is testing one single case, i.e. a normal item which is not reaching its ~sell_in~ date.

Next step will be to modify this test to check what happens when a normal item's ~sell_in~ date is reached.

#+REVEAL: split

Starting from the last test, we can do the following:

#+BEGIN_SRC python :exports code
def test_normal_items():
    # Arrange
    test_cases = [
        (
            Item("+5 Dexterity Vest", 2, 4),
            Item("+5 Dexterity Vest", 1, 3),
        ),
        (
            Item("+5 Dexterity Vest", 1, 3),
            Item("+5 Dexterity Vest", 0, 2),
        ),
    ]
    items = [test_case[0] for test_case in test_cases]
    gilded_rose = GildedRose(items)
    # Act
    gilded_rose.update_quality()
    # Assert
    for i, item in enumerate(items):
        assert item.sell_in == test_cases[i][1].sell_in
        assert item.quality == test_cases[i][1].quality
#+END_SRC

#+REVEAL: split

Now, let's check this is working fine:

#+BEGIN_SRC bash :exports code
pytest .
#+END_SRC

#+BEGIN_EXAMPLE
============================= test session starts ==============================
platform linux -- Python 3.5.4, pytest-3.2.3, py-1.4.34, pluggy-0.4.0
rootdir: /home/ifosch/src/github.com/BCNDojos/pyDojos/gilded-rose, inifile:
collected 1 item

test_gilded_rose.py .

=========================== 1 passed in 0.01 seconds ===========================
#+END_EXAMPLE

This is good, but, what will happen when more normal items are to be added?

*** Equipping more /Normal/ items

The test for normal items is not testing the cases where the item decreases twice as fast, until reaching 0 quality.
Note that these are two different cases:
- decreasing twice as fast
- ~quality~ can't be negative

Next step will be to modify the test code to check what happens in these two cases.

#+REVEAL: split

Keeping the paced stepping we have been taking, an option could be just to add the corresponding test cases:

#+BEGIN_SRC python :exports code
def test_normal_items():
    # Arrange
    test_cases = [
        (
            Item("+5 Dexterity Vest", 2, 4),
            Item("+5 Dexterity Vest", 1, 3),
        ),
        (
            Item("+5 Dexterity Vest", 1, 3),
            Item("+5 Dexterity Vest", 0, 2),
        ),
        (
            Item("+5 Dexterity Vest", 0, 2),
            Item("+5 Dexterity Vest", -1, 0),
        ),
        (
            Item("+5 Dexterity Vest", -1, 0),
            Item("+5 Dexterity Vest", -2, 0),
        ),
    ]
    ...
#+END_SRC

#+REVEAL: split

And it would still work fine:

#+BEGIN_SRC bash :exports code
pytest .
#+END_SRC

#+BEGIN_EXAMPLE
============================= test session starts ==============================
platform linux -- Python 3.5.4, pytest-3.2.3, py-1.4.34, pluggy-0.4.0
rootdir: /home/ifosch/src/github.com/BCNDojos/pyDojos/gilded-rose, inifile:
collected 1 item

test_gilded_rose.py .
=========================== 1 passed in 0.03 seconds ===========================
#+END_EXAMPLE

*** Equipping ~Aged Brie~ items

Next step will be to implement tests for ~Aged Brie~ items.

#+REVEAL: split

In this case, easiest approach would be to copy the /Normal/ items test function, and modify it with the appropriated test cases:

#+BEGIN_SRC python :exports code
def test_aged_brie_items():
    # Arrange
    test_cases = [
        (
            Item("Aged Brie", 2, 4),
            Item("Aged Brie", 1, 5),
        ),
        (
            Item("Aged Brie", 1, 5),
            Item("Aged Brie", 0, 6),
        ),
        (
            Item("Aged Brie", 0, 6),
            Item("Aged Brie", -1, 8),
        ),
        (
            Item("Aged Brie", -1, 49),
            Item("Aged Brie", -2, 50),
        ),
    ]
    ...
#+END_SRC

#+REVEAL: split

This should work also fine:

#+BEGIN_SRC bash :exports code
pytest .
#+END_SRC

#+BEGIN_EXAMPLE
============================= test session starts ==============================
platform linux -- Python 3.5.4, pytest-3.2.3, py-1.4.34, pluggy-0.4.0
rootdir: /home/ifosch/src/github.com/BCNDojos/pyDojos/gilded-rose, inifile:
collected 2 items

test_gilded_rose.py ..

=========================== 2 passed in 0.03 seconds ===========================
#+END_EXAMPLE

*** Equipping ~Backstage passes...~ items

Next step will be to implement tests for ~Backstage passes...~ items.

#+REVEAL: split

In this case, one approach would be to repeat what was done for the ~Aged Brie~, but it would be a good moment to add some generalization to the tests code.

The Act and Assert parts of all the test functions are the same, thus these can be parametrized.

#+REVEAL: split

Let's create the following helper functions:

#+BEGIN_SRC python :exports code
def update_arrange(test_cases):
    # Arrange
    items = [test_case[0] for test_case in test_cases]
    gilded_rose = GildedRose(items)
    return items, gilded_rose
#+END_SRC

#+REVEAL: split

And:

#+BEGIN_SRC python :exports code
def update_assert(items, test_cases):
    # Assert
    for i, item in enumerate(items):
        assert item.sell_in == test_cases[i][1].sell_in
        assert item.quality == test_cases[i][1].quality
#+END_SRC

#+REVEAL: split

Then, the test function for all the ~Backstage passes...~ cases would look like this:

#+BEGIN_SRC python :exports code
def test_backstage_passes_items():
    # Arrange
    test_cases = [
        (
            Item("Backstage passes to a TAFKAL80ETC concert", 20, 4),
            Item("Backstage passes to a TAFKAL80ETC concert", 19, 5),
        ),
        (
            Item("Backstage passes to a TAFKAL80ETC concert", 10, 5),
            Item("Backstage passes to a TAFKAL80ETC concert", 9, 7),
        ),
        (
            Item("Backstage passes to a TAFKAL80ETC concert", 5, 6),
            Item("Backstage passes to a TAFKAL80ETC concert", 4, 9),
        ),
        (
            Item("Backstage passes to a TAFKAL80ETC concert", 0, 6),
            Item("Backstage passes to a TAFKAL80ETC concert", -1, 0),
        ),
        (
            Item("Backstage passes to a TAFKAL80ETC concert", 10, 49),
            Item("Backstage passes to a TAFKAL80ETC concert", 9, 50),
        ),
        (
            Item("Backstage passes to a TAFKAL80ETC concert", 5, 49),
            Item("Backstage passes to a TAFKAL80ETC concert", 4, 50),
        ),
    ]
#+END_SRC

#+REVEAL: split

#+BEGIN_SRC python :exports code
    items, gilded_rose = update_arrange(test_cases)
    # Act
    gilded_rose.update_quality()
    # Assert
    update_assert(items, test_cases)
#+END_SRC

#+REVEAL: split

All other tests can be adapted to use these, and everything should still work:

#+BEGIN_SRC bash :exports code
pytest .
#+END_SRC

#+BEGIN_EXAMPLE
============================= test session starts ==============================
platform linux -- Python 3.5.4, pytest-3.2.3, py-1.4.34, pluggy-0.4.0
rootdir: /home/ifosch/src/github.com/BCNDojos/pyDojos/gilded-rose, inifile:
collected 3 items

test_gilded_rose.py ...

=========================== 3 passed in 0.02 seconds ===========================
#+END_EXAMPLE

*** Equipping ~Sulfuras...~ items

Next step will be to implement tests for ~Sulfuras...~ items.

#+REVEAL: split

In this case, the approach of duplicating the test function for ~Sulfuras...~ will be enough.

Then, the test function for all the ~Sulfuras...~ cases would look like this:

#+BEGIN_SRC python :exports code
def test_sulfuras_items():
    # Arrange
    test_cases = [
        (
            Item("Sulfuras, Hand of Ragnaros", 20, 4),
            Item("Sulfuras, Hand of Ragnaros", 20, 4),
        ),
        (
            Item("Sulfuras, Hand of Ragnaros", 0, 54),
            Item("Sulfuras, Hand of Ragnaros", 0, 54),
        ),
    ]
    ...
#+END_SRC

#+REVEAL: split

All tests should still pass:

#+BEGIN_SRC bash :exports code
pytest .
#+END_SRC

#+BEGIN_EXAMPLE
============================= test session starts ==============================
platform linux -- Python 3.5.4, pytest-3.2.3, py-1.4.34, pluggy-0.4.0
rootdir: /home/ifosch/src/github.com/BCNDojos/pyDojos/gilded-rose, inifile:
collected 4 items

test_gilded_rose.py ....

=========================== 4 passed in 0.02 seconds ===========================
#+END_EXAMPLE

** Getting down the dungeon

Once you get your tests completed and your ~golden_master~ ready, you can go ahead and start refactoring the ~update_quality~ method...
Remember running your tests often and good luck!

*** Refactor October Dojo
    
**** Isolate ~Sulfuras...~
First, add ~if item.name == sulfuras~ with continue, and keep the rest of the code, otherwise.
In that part, remove mentions to ~Sulfuras...~, and fix indentation.

**** Isolate ~Aged Brie~
Add branch in first level branching for ~Aged Brie~.
Then, remove unnecessary code under the first level ~else~.

**** Isolate ~Backstage passes...~
Add branch in first level branching for ~Backstage passes...~.
Then, remove unnecessary code under the first level ~else~.

*** Refactor October Dojo (II)

**** Push ~sell_in~ decrease to the end of function
Move ~items.sell_in -= 1~ to the end of the ~update_quality~ method, and update all thresholds.

**** Collapsed nested branches joining with ~and~
All the nested ~if~ are collapsable by joining the conditions with ~and~.

**** Make ~quality~ update to rely on a ~delta~ calculation
The ~quality~ update now happens right before ~sell_in~, at the end of the ~update_quality~ method, and it's based on a ~delta~ value calculated correspondingly to the kind of item, and the ~sell_in~ value.

** The return to the Gilded Rose Inn

Your task now is to add the new feature to our system so that we can begin selling a new category of items.
We have recently signed a supplier of conjured items.
This requires an update to our system:

- “Conjured” items degrade in quality twice as fast as normal items

Same rules on Items class and items property apply here.

* Gilded Rose Refactoring Kata Retrospective

- Importance of running examples (Golden Master Testing)
- Relevance of business rules vs current implementation
- Importance of tests
- Test functions distribution
- Test refactoring
- Continuous Integration
- Ideas to remove the last branch
