#+AUTHOR: Ignasi Fosch
#+TITLE: PyBCN Dojo: Gilded Rose Refactoring Kata
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/
#+REVEAL_HLEVEL: 2
#+REVEAL_EXTRA_CSS: dojos.css
#+OPTIONS: toc:2
#+OPTIONS: reveal_progress:t
#+OPTIONS: reveal_title_slide:"<h1>%t</h1><h2>%a</h2>"
#+OPTIONS: reveal_width:1200
#+OPTIONS: reveal_height:800
#+REVEAL_THEME: beige

* Dojo session
*** Coding dojo goals
- Enjoy coding with friends
- Learn about techniques and tools from others
- Share knowledge with others
- Practice new techniques and tools in a safe environment
*** Coding dojo principles
- No competition, no target, no prizes
- Practice and experiment
- Master a subject
- Understand and offer own knowledge
- Show own code and examples
- Forget to learn again
- Baby steps, not in a rush
- Listen others
*** Coding dojo cycle
#+BEGIN_SRC ditaa :file dojo_cycle.png
                    /------------------\
                    |     OVERVIEW     |
                    | Problem analysis |
          +---------|   Test cases     |
          |         |   Guiding Test   |
          |         \------------------/
          |
          v
 /------------------\               /--------------------\
 | cRED  RED        |               | cGRE   GREEN       |
 |  Declare & Name  |-------------->| Implement Solution |
 |      AAA         |               |  No Optimization   |
 | Satisfy Language |               |    Start Over      |
 \------------------/               \--------------------/
          ^                                    |
          |         /---------------------\    |
          |         | cYEL  REFACTOR      |    |
          +---------| Remove useless code |<---+
                    |      Optimize       |
                    |   Check all green   |
                    | Note new test cases |
                    \---------------------/
#+END_SRC
* Gilded Rose Refactoring Kata
** The Gilded Rose Inn
Hi and welcome to team Gilded Rose.

As you know, we are a small inn with a prime location in a prominent city ran by a friendly innkeeper named Allison.
We also buy and sell only the finest goods.
Unfortunately, our goods are constantly degrading in quality as they approach their sell by date.
We have a system in place that updates our inventory for us.
It was developed by a no-nonsense type named Leeroy, who has moved on to new adventures.

#+REVEAL: split

First an introduction to our system:
- All items have a ~sell_in~ value which denotes the number of days we have to sell the item
- All items have a quality value which denotes how valuable the item is
- At the end of each day our system lowers both values for every item

#+REVEAL: split

Pretty simple, right?
Well, this is where it gets interesting:
- Once the sell by date has passed, quality degrades twice as fast
- The quality of an item is never negative
- “Aged Brie” actually increases in quality the older it gets
- The quality of an item is never more than 50
- “Sulfuras...”, being a legendary item, never has to be sold or decreases in quality
- “Backstage passes...”, like aged brie, increases in quality as it’s ~sell_in~ value approaches; quality increases by 2 when there are 10 days or less and by 3 when there are 5 days or less but quality drops to 0 after the concert

#+REVEAL: split

Feel free to make any changes to the ~update_quality~ method and add any new code as long as everything still works correctly.
However, do not alter the Item class or items property as those belong to the goblin in the corner who will insta-rage and one-shot you as he doesn’t believe in shared code ownership (you can make the ~update_quality~ method and items property static if you like, we’ll cover for you).

** Get your gear!

For this quest, you have been provided with some items that will help you...

You've been provided with a fixture generator, which generates example runs with many cases.

#+REVEAL: split

You can use it like this, argument is the number of days to count for update:

    : $ python generate_fixture.py 1
    : -------- day 0 --------
    : name, sellIn, quality
    : +5 Dexterity Vest, 10, 20
    : Aged Brie, 2, 0
    : Elixir of the Mongoose, 5, 7
    : Sulfuras, Hand of Ragnaros, 0, 80
    : Sulfuras, Hand of Ragnaros, -1, 80
    : Backstage passes to a TAFKAL80ETC concert, 15, 20
    : Backstage passes to a TAFKAL80ETC concert, 10, 49
    : Backstage passes to a TAFKAL80ETC concert, 5, 49
    : Conjured Mana Cake, 3, 6

#+REVEAL: split

    : -------- day 1 --------
    : name, sellIn, quality
    : +5 Dexterity Vest, 9, 19
    : Aged Brie, 1, 1
    : Elixir of the Mongoose, 4, 6
    : Sulfuras, Hand of Ragnaros, 0, 80
    : Sulfuras, Hand of Ragnaros, -1, 80
    : Backstage passes to a TAFKAL80ETC concert, 14, 21
    : Backstage passes to a TAFKAL80ETC concert, 9, 50
    : Backstage passes to a TAFKAL80ETC concert, 4, 50
    : Conjured Mana Cake, 2, 5

#+REVEAL: split

You are strongly recommended to run this command with an appropriate number of days as argument, redirecting the output to a ~golden_master.txt~ file.
That way, while refactoring, you'll be able to check the output of the following command to ensure everything is ok:

    : $ bash run_tests
    : ============================= test session starts ==============================
    : platform linux -- Python 3.5.4, pytest-3.2.3, py-1.4.34, pluggy-0.4.0
    : rootdir: /home/ifosch/src/github.com/BCNDojos/pyDojos/gilded-rose, inifile:
    : collected 1 item
    : 
    : test_gilded_rose.py .
    : 
    : ======================== 1 passed in 0.00 seconds ==============================

*** Get some scrolls

If you take a look to ~run_tests~ it will show how many days it is using to generate the fixture:

#+INCLUDE: "run_tests" src sh :only-contents t

So, this bash script runs ~pytest~ on current directory.
If it works ok, then, it runs the fixture generator for 27 days, storing output to ~test_output.txt~.
If this doesn't fail, then it compares output from current code with the fixture file.
This fixture file is what needs to be generated in this step.

#+REVEAL: split

Let's run it like this:

#+BEGIN_SRC bash -l :results output :exports code
python generate_fixture.py 27 > golden_master.txt
#+END_SRC

#+BEGIN_SRC bash -l :results output :exports results
. ~/.bashrc &>/dev/null && . ~/.bash_profile &>/dev/null && activate gilded-rose &>/dev/null
python generate_fixture.py 27 > golden_master.txt
#+END_SRC

*** Learn some magic

Let's look at the file now, and check how the business rules are applied by the current implementation:

#+INCLUDE: "golden_master.txt" src sh :lines "-25"

#+REVEAL: split

From these first 24 lines, we can infer the following:
- /Normal/ items, like ~+5 Dexterity Vest~, ~Elixir of the Mongoose~, or ~Conjured Mana Cake~, are treated as described, so far; meaning these items' ~sell_in~ and ~quality~ attributes are decreased in 1
- ~Aged Brie~, as specified, increases quality as getting older
- ~Sulfuras...~ are kept untouched, even when the ~quality > 50~, or when the ~sell_in~ date was reached
- ~Backstage passes...~ are also treated as specified, so far

#+REVEAL: split

#+INCLUDE: "golden_master.txt" src sh :lines "25-49"

#+REVEAL: split

These other lines show us some more details:
- As described, ~Aged Brie~ increases ~quality~ twice, once the ~sell_in~ date has been reached
- Two of the ~Backstage passes...~ items have reached maximum ~quality~, so these can't got it better
- The behaviour of the rest of the items is as expected

#+REVEAL: split

#+INCLUDE: "golden_master.txt" src sh :lines "61-85"

#+REVEAL: split

In this part of the file, we can see the following:
- /Normal/ items that passed ~sell_in~ date, like ~Elixir of the Mongoose~ or ~Conjured Mana Cake~ here, get 0 ~quality~
- ~Backstage passes...~ having ~sell_in < 10~ increase their ~quality~ twice
- ~Backstage passes...~ having passed their ~sell_in~, get 0 ~quality~

#+REVEAL: split

#+INCLUDE: "golden_master.txt" src sh :lines "121-145"

#+REVEAL: split

Here, the only thing left to confirm is that ~Backstage passes...~ having less than 5 days to ~sell_in~, increase quality by 3.

#+REVEAL: split

#+INCLUDE: "golden_master.txt" src sh :lines "312-"

#+REVEAL: split

Finally, the last two days updates can't increase ~Aged Brie~'s ~quality~ over 50.

** Equip your gear

Before going on, you should also fill up the ~test_gilded_rose.py~ with tests for the all use cases...
Be careful, there'll be dragons!

** Getting down the dungeon

Once you get your tests completed and your ~golden_master~ ready, you can go ahead and start refactoring the ~update_quality~ method...
Remember running your tests often and good luck!

** The return to the Gilded Rose Inn

Your task now is to add the new feature to our system so that we can begin selling a new category of items.
We have recently signed a supplier of conjured items.
This requires an update to our system:

- “Conjured” items degrade in quality twice as fast as normal items

Same rules on Items class and items property apply here.

#+BEGIN_SRC bash -l :results output :exports none
. ~/.bashrc &>/dev/null && . ~/.bash_profile &>/dev/null && activate gilded-rose &>/dev/null
pytest . && python generate_fixture.py 27 > test_output.txt && diff test_output.txt golden_master.txt
echo -n ""
#+END_SRC

#+RESULTS:
#+begin_example
============================= test session starts ==============================
platform linux -- Python 3.5.4, pytest-3.2.3, py-1.4.34, pluggy-0.4.0
rootdir: /home/ifosch/src/github.com/BCNDojos/pyDojos/gilded-rose, inifile:
collected 1 item

test_gilded_rose.py F

=================================== FAILURES ===================================
___________________________________ test_foo ___________________________________

    def test_foo():
        items = [Item("foo", 0, 0)]
        gilded_rose = GildedRose(items)
        gilded_rose.update_quality()
>       assert "fixme" == items[0].name
E       AssertionError: assert 'fixme' == 'foo'
E         - fixme
E         + foo

test_gilded_rose.py:11: AssertionError
=========================== 1 failed in 0.05 seconds ===========================
#+end_example
